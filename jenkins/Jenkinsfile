pipeline {
    agent any

    environment {
        // AWS Configuration
        AWS_REGION = "us-west-2"
        ACCOUNT_ID = "778813324501"
        ECR_REGISTRY = "${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
        FRONTEND_REPO = "${ECR_REGISTRY}/frontend"
        BACKEND_REPO = "${ECR_REGISTRY}/backend"

        // Jenkins Credential ID for the IAM Role to be assumed
        AWS_ROLE_CREDENTIAL_ID = 'aws-oidc-role' 
    }

    stages {
        stage('SonarQube Analysis') {
            steps {
                // The 'withSonarQubeEnv' block now correctly provides the host URL
                // from your Jenkins system configuration.
                withSonarQubeEnv('SonarQube') {
                    withCredentials([string(credentialsId: 'E-commerce', variable: 'SONAR_TOKEN')]) {
                        // REMOVED the hardcoded '-Dsonar.host.url'.
                        sh """
                            sonar-scanner \
                              -Dsonar.projectKey=aws3tier \
                              -Dsonar.projectName=aws3tiere \
                              -Dsonar.sources=. \
                              -Dsonar.login=$SONAR_TOKEN
                        """
                    }
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                sh '''
                    docker build -t frontend ./frontend
                    docker build -t backend ./backend
                '''
            }
        }

        stage('Trivy Security Scan') {
            steps {
                // This command will exit with an error code only if HIGH or CRITICAL vulnerabilities are found.
                sh '''
                    trivy image --severity HIGH,CRITICAL --exit-code 1 frontend
                    trivy image --severity HIGH,CRITICAL --exit-code 1 backend
                '''
            }
        }
        
        // This 'withAWS' block handles authentication for all AWS commands inside it.
        // It uses the IAM role specified by AWS_ROLE_CREDENTIAL_ID.
        withAWS(role: AWS_ROLE_CREDENTIAL_ID, roleSessionName: "jenkins-session-${BUILD_NUMBER}", region: AWS_REGION) {

            stage('Push to ECR') {
                steps {
                    script {
                        // The ECR login is now handled automatically by the withAWS block.
                        sh "docker tag frontend:latest ${FRONTEND_REPO}:latest"
                        sh "docker tag backend:latest ${BACKEND_REPO}:latest"

                        sh "docker push ${FRONTEND_REPO}:latest"
                        sh "docker push ${BACKEND_REPO}:latest"
                    }
                }
            }

            stage('Deploy to EC2 via SSM') {
                steps {
                    sh """
                        aws ssm send-command \
                          --targets "Key=tag:Role,Values=Frontend" \
                          --document-name "AWS-RunShellScript" \
                          --comment "Deploy Frontend via Jenkins" \
                          --parameters 'commands=["docker stop frontend || true", "docker rm frontend || true", "docker pull ${FRONTEND_REPO}:latest", "docker run -d --name frontend -p 80:3000 --restart unless-stopped ${FRONTEND_REPO}:latest"]'

                        aws ssm send-command \
                          --targets "Key=tag:Role,Values=Backend" \
                          --document-name "AWS-RunShellScript" \
                          --comment "Deploy Backend via Jenkins" \
                          --parameters 'commands=["docker stop backend || true", "docker rm backend || true", "docker pull ${BACKEND_REPO}:latest", "docker run -d --name backend -p 5000:5000 --restart unless-stopped ${BACKEND_REPO}:latest"]'
                    """
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline finished.'
            // Optional: cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
            // You can add notifications here, e.g., for Slack or email.
        }
        failure {
            echo 'Pipeline failed.'
            // You can add notifications here, e.g., for Slack or email.
        }
    }
}